{"metadata":{"kernelspec":{"display_name":"R","language":"R","name":"ir"},"language_info":{"codemirror_mode":"r","file_extension":".r","mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"3.6.1"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"#Optimizacion Bayesiana de hiperparametros de  rpart\n#funciona automaticamente con EXPERIMENTOS\n#va generando incrementalmente salidas para kaggle\n\n#limpio la memoria\nrm( list=ls() )  #remove all objects\ngc()             #garbage collection\n\nlibrary(\"data.table\")\nlibrary(\"rlist\")\nlibrary(\"yaml\")\n\nlibrary(\"rpart\")\nlibrary(\"parallel\")\n\n#paquetes necesarios para la Bayesian Optimization\nlibrary(\"DiceKriging\")\nlibrary(\"mlrMBO\")","metadata":{"execution":{"iopub.status.busy":"2021-09-03T23:48:37.561434Z","iopub.execute_input":"2021-09-03T23:48:37.564042Z","iopub.status.idle":"2021-09-03T23:48:38.008402Z"},"trusted":true},"execution_count":21,"outputs":[{"output_type":"display_data","data":{"text/html":"<table class=\"dataframe\">\n<caption>A matrix: 2 × 6 of type dbl</caption>\n<thead>\n\t<tr><th></th><th scope=col>used</th><th scope=col>(Mb)</th><th scope=col>gc trigger</th><th scope=col>(Mb)</th><th scope=col>max used</th><th scope=col>(Mb)</th></tr>\n</thead>\n<tbody>\n\t<tr><th scope=row>Ncells</th><td>2626069</td><td>140.3</td><td> 5022657</td><td>268.3</td><td> 5022657</td><td>268.3</td></tr>\n\t<tr><th scope=row>Vcells</th><td>4550050</td><td> 34.8</td><td>10146329</td><td> 77.5</td><td>10145950</td><td> 77.5</td></tr>\n</tbody>\n</table>\n","text/markdown":"\nA matrix: 2 × 6 of type dbl\n\n| <!--/--> | used | (Mb) | gc trigger | (Mb) | max used | (Mb) |\n|---|---|---|---|---|---|---|\n| Ncells | 2626069 | 140.3 |  5022657 | 268.3 |  5022657 | 268.3 |\n| Vcells | 4550050 |  34.8 | 10146329 |  77.5 | 10145950 |  77.5 |\n\n","text/latex":"A matrix: 2 × 6 of type dbl\n\\begin{tabular}{r|llllll}\n  & used & (Mb) & gc trigger & (Mb) & max used & (Mb)\\\\\n\\hline\n\tNcells & 2626069 & 140.3 &  5022657 & 268.3 &  5022657 & 268.3\\\\\n\tVcells & 4550050 &  34.8 & 10146329 &  77.5 & 10145950 &  77.5\\\\\n\\end{tabular}\n","text/plain":"       used    (Mb)  gc trigger (Mb)  max used (Mb) \nNcells 2626069 140.3  5022657   268.3  5022657 268.3\nVcells 4550050  34.8 10146329    77.5 10145950  77.5"},"metadata":{}}]},{"cell_type":"code","source":"#para poder usarlo en la PC y en la nube\nswitch ( Sys.info()[['sysname']],\n         Windows = { directory.root   <-  \"M:\\\\\" },   #Microsoft Windows\n         Darwin  = { directory.root   <-  \"~/dm/\" },  #Apple MAC\n         Linux   = { directory.root   <-  \"../kaggle/working/\" }  #Entorno Google Cloud\n       )\n#defino la carpeta donde trabajo\n#setwd( directory.root )","metadata":{"execution":{"iopub.status.busy":"2021-09-03T23:48:38.013266Z","iopub.execute_input":"2021-09-03T23:48:38.015195Z","iopub.status.idle":"2021-09-03T23:48:38.036973Z"},"trusted":true},"execution_count":22,"outputs":[]},{"cell_type":"code","source":"kexperimento  <- NA   #NA si se corre la primera vez, un valor concreto si es para continuar procesando\n\nkscript           <- \"03.01 - BO Rpart\"\nkarch_generacion  <- \"../input/laboratorio-de-implementacion-i-2021/paquete_premium_202011.csv\"\nkarch_aplicacion  <- \"../input/laboratorio-de-implementacion-i-2021/paquete_premium_202101.csv\"\nkBO_iter    <-  200   #cantidad de iteraciones de la Optimizacion Bayesiana\n\nhs  <- makeParamSet(\n          makeNumericParam(\"cp\"       , lower= -1   , upper=    0.1),\n          makeIntegerParam(\"minsplit\" , lower=  1L  , upper= 8000L),  #la letra L al final significa ENTERO\n          makeIntegerParam(\"minbucket\", lower=  1L  , upper= 2000L),\n          makeIntegerParam(\"maxdepth\" , lower=  3L  , upper=   20L),\n          forbidden = quote( minbucket > 0.5*minsplit ) )\n\n\nksemilla_azar  <- 102191","metadata":{"execution":{"iopub.status.busy":"2021-09-03T23:48:38.184391Z","iopub.execute_input":"2021-09-03T23:48:38.186599Z","iopub.status.idle":"2021-09-03T23:48:38.222586Z"},"trusted":true},"execution_count":23,"outputs":[]},{"cell_type":"code","source":"#------------------------------------------------------------------------------\n#Funcion que lleva el registro de los experimentos\n\nget_experimento  <- function()\n{\n  if( !file.exists( \"./maestro.yaml\" ) )  cat( file=\"./maestro.yaml\", \"experimento: 1000\" )\n\n  exp  <- read_yaml( \"./maestro.yaml\" )\n  experimento_actual  <- exp$experimento\n\n  exp$experimento  <- as.integer(exp$experimento + 1)\n  Sys.chmod( \"./maestro.yaml\", mode = \"0644\", use_umask = TRUE)\n  write_yaml( exp, \"./maestro.yaml\" )\n  Sys.chmod( \"./maestro.yaml\", mode = \"0444\", use_umask = TRUE) #dejo el archivo readonly\n\n  return( experimento_actual )\n}","metadata":{"execution":{"iopub.status.busy":"2021-09-03T23:48:38.635584Z","iopub.execute_input":"2021-09-03T23:48:38.637805Z","iopub.status.idle":"2021-09-03T23:48:38.657959Z"},"trusted":true},"execution_count":24,"outputs":[]},{"cell_type":"code","source":"#------------------------------------------------------------------------------\n#graba a un archivo los componentes de lista\n#para el primer registro, escribe antes los titulos\n\nloguear  <- function( reg, arch=NA, folder=\"./\", ext=\".txt\", verbose=TRUE )\n{\n  archivo  <- arch\n  if( is.na(arch) )  archivo  <- paste0(  folder, substitute( reg), ext )\n\n  if( !file.exists( archivo ) )  #Escribo los titulos\n  {\n    linea  <- paste0( \"fecha\\t\", \n                      paste( list.names(reg), collapse=\"\\t\" ), \"\\n\" )\n\n    cat( linea, file=archivo )\n  }\n\n  linea  <- paste0( format(Sys.time(), \"%Y%m%d %H%M%S\"),  \"\\t\",     #la fecha y hora\n                    gsub( \", \", \"\\t\", toString( reg ) ),  \"\\n\" )\n\n  cat( linea, file=archivo, append=TRUE )  #grabo al archivo\n\n  if( verbose )  cat( linea )   #imprimo por pantalla\n}","metadata":{"execution":{"iopub.status.busy":"2021-09-03T23:48:39.082075Z","iopub.execute_input":"2021-09-03T23:48:39.084280Z","iopub.status.idle":"2021-09-03T23:48:39.104252Z"},"trusted":true},"execution_count":25,"outputs":[]},{"cell_type":"code","source":"#------------------------------------------------------------------------------\n#funcion para particionar, es la que Andres reemplaza con caret\n\nparticionar  <- function( data, division, agrupa=\"\", campo=\"fold\", start=1, seed=NA )\n{\n  if( !is.na( seed)  )   set.seed( seed )\n\n  bloque  <- unlist( mapply(  function(x,y) { rep( y, x ) }, division, seq( from=start, length.out=length(division) )  ) )\n\n  data[ , (campo) :=  sample( rep( bloque, ceiling(.N/length(bloque))) )[1:.N],\n           by= agrupa ]\n}\n#------------------------------------------------------------------------------","metadata":{"execution":{"iopub.status.busy":"2021-09-03T23:48:40.743208Z","iopub.execute_input":"2021-09-03T23:48:40.745389Z","iopub.status.idle":"2021-09-03T23:48:40.765855Z"},"trusted":true},"execution_count":26,"outputs":[]},{"cell_type":"code","source":"ArbolSimple  <- function( fold_test, data, param )\n{\n  #genero el modelo\n  modelo  <- rpart(\"clase_ternaria ~ .\", \n                   data= data[ fold != fold_test, ],\n                   xval= 0,\n                   control= param )\n\n  #aplico el modelo a los datos de testing, fold==2\n  prediccion  <- predict( modelo, data[ fold==fold_test, ], type = \"prob\")\n\n  prob_baja2  <- prediccion[, \"BAJA+2\"]\n\n  ganancia_testing  <- sum(  data[ fold==fold_test ][ prob_baja2 >0.025,  ifelse( clase_ternaria==\"BAJA+2\", 48750, -1250 ) ] )\n\n  return( ganancia_testing )\n}","metadata":{"execution":{"iopub.status.busy":"2021-09-03T23:48:41.860868Z","iopub.execute_input":"2021-09-03T23:48:41.863143Z","iopub.status.idle":"2021-09-03T23:48:41.882082Z"},"trusted":true},"execution_count":27,"outputs":[]},{"cell_type":"code","source":"#------------------------------------------------------------------------------\n\nArbolesCrossValidation  <- function( data, param, qfolds, pagrupa, semilla )\n{\n  divi  <- rep( 1, qfolds )\n  particionar( data, divi, seed=semilla, agrupa=pagrupa )\n\n  ganancias  <- mcmapply( ArbolSimple, \n                          seq(qfolds), # 1 2 3 4 5  \n                          MoreArgs= list( data, param), \n                          SIMPLIFY= FALSE,\n                          mc.cores= 5 )   #se puede subir a 5 si posee Linux o Mac OS\n\n  data[ , fold := NULL ]\n  #devuelvo la primer ganancia y el promedio\n  return( mean( unlist( ganancias )) *  qfolds )   #aqui normalizo la ganancia\n}","metadata":{"execution":{"iopub.status.busy":"2021-09-03T23:48:42.549730Z","iopub.execute_input":"2021-09-03T23:48:42.552004Z","iopub.status.idle":"2021-09-03T23:48:42.571535Z"},"trusted":true},"execution_count":28,"outputs":[]},{"cell_type":"code","source":"#------------------------------------------------------------------------------\n#esta funcion solo puede recibir los parametros que se estan optimizando\n#el resto de los parametros se pasan como variables globales\n\nEstimarGanancia  <- function( x )\n{\n   GLOBAL_iteracion  <<-  GLOBAL_iteracion + 1\n\n   xval_folds  <- 5\n   ganancia  <-  ArbolesCrossValidation( dataset, param=x, qfolds= xval_folds, pagrupa=\"clase_ternaria\", semilla=ksemilla_azar )\n\n   #si tengo una ganancia superadora, genero el archivo para Kaggle\n   if(  ganancia > GLOBAL_ganancia_max )\n   {\n     GLOBAL_ganancia_max <<-  ganancia  #asigno la nueva maxima ganancia\n    \n     modelo  <- rpart(\"clase_ternaria ~ .\",\n                      data= dataset,\n                      xval= 0,\n                      control= x )\n\n     #genero el vector con la prediccion, la probabilidad de ser positivo\n     prediccion  <- predict( modelo, dapply)\n\n     prob_baja2  <- prediccion[, \"BAJA+2\"]\n     Predicted   <- ifelse( prob_baja2 > 0.025, 1, 0 )\n\n     entrega  <-  as.data.table( list( \"numero_de_cliente\"=dapply$numero_de_cliente, \"Predicted\"=Predicted)  )\n\n     #genero el archivo para Kaggle\n     fwrite( entrega, \n             file= paste0(kkaggle, GLOBAL_iteracion, \".csv\" ),\n             sep=  \",\" )\n   }\n\n   #logueo \n   xx  <- x\n   xx$xval_folds  <-  xval_folds\n   xx$ganancia  <- ganancia\n   loguear( xx,  arch= klog )\n\n\n   return( ganancia )\n}\n#------------------------------------------------------------------------------","metadata":{"execution":{"iopub.status.busy":"2021-09-03T23:48:43.997842Z","iopub.execute_input":"2021-09-03T23:48:43.999937Z","iopub.status.idle":"2021-09-03T23:48:44.020357Z"},"trusted":true},"execution_count":29,"outputs":[]},{"cell_type":"code","source":"#Aqui empieza el programa\n\nif( is.na(kexperimento ) )   kexperimento <- get_experimento()  #creo el experimento","metadata":{"execution":{"iopub.status.busy":"2021-09-03T23:49:08.558696Z","iopub.execute_input":"2021-09-03T23:49:08.560607Z","iopub.status.idle":"2021-09-03T23:49:08.582387Z"},"trusted":true},"execution_count":30,"outputs":[{"name":"stderr","text":"Warning message in readLines(file):\n“incomplete final line found on './maestro.yaml'”\n","output_type":"stream"}]},{"cell_type":"code","source":"#en estos archivos quedan los resultados\nkbayesiana  <- paste0(\"./E\",  kexperimento, \"_rpart.RDATA\" )\nklog        <- paste0(\"./E\",  kexperimento, \"_rpart_log.txt\" )\nkkaggle     <- paste0(\"./E\",kexperimento, \"_rpart_kaggle_\" )","metadata":{"execution":{"iopub.status.busy":"2021-09-03T23:50:56.941894Z","iopub.execute_input":"2021-09-03T23:50:56.944315Z","iopub.status.idle":"2021-09-03T23:50:56.970365Z"},"trusted":true},"execution_count":31,"outputs":[]},{"cell_type":"code","source":"GLOBAL_ganancia_max  <-  -Inf\nGLOBAL_iteracion  <- 0","metadata":{"execution":{"iopub.status.busy":"2021-09-03T23:50:58.301528Z","iopub.execute_input":"2021-09-03T23:50:58.303719Z","iopub.status.idle":"2021-09-03T23:50:58.323255Z"},"trusted":true},"execution_count":32,"outputs":[]},{"cell_type":"code","source":"if( file.exists(klog) )\n{\n tabla_log  <- fread( klog)\n GLOBAL_iteracion  <- nrow( tabla_log ) -1\n GLOBAL_ganancia_max  <-  tabla_log[ , max(ganancia) ]\n}","metadata":{"execution":{"iopub.status.busy":"2021-09-03T23:51:46.362983Z","iopub.execute_input":"2021-09-03T23:51:46.365534Z","iopub.status.idle":"2021-09-03T23:51:46.384933Z"},"trusted":true},"execution_count":33,"outputs":[]},{"cell_type":"code","source":"#cargo los datasets\ndataset  <- fread(karch_generacion)   #donde entreno\ndapply  <- fread(karch_aplicacion)    #donde aplico el modelo","metadata":{"execution":{"iopub.status.busy":"2021-09-03T23:51:49.961402Z","iopub.execute_input":"2021-09-03T23:51:49.963574Z","iopub.status.idle":"2021-09-03T23:51:50.024150Z"},"trusted":true},"execution_count":34,"outputs":[{"ename":"ERROR","evalue":"Error in fread(karch_generacion): File '../input/laboratorio-de-implementacion-i-2021/paquete_premium_202011.csv' does not exist or is non-readable. getwd()=='/kaggle/working'\n","traceback":["Error in fread(karch_generacion): File '../input/laboratorio-de-implementacion-i-2021/paquete_premium_202011.csv' does not exist or is non-readable. getwd()=='/kaggle/working'\nTraceback:\n","1. fread(karch_generacion)","2. stop(\"File '\", file, \"' does not exist or is non-readable. getwd()=='\", \n .     getwd(), \"'\")"],"output_type":"error"}]},{"cell_type":"code","source":"#Aqui comienza la configuracion de la Bayesian Optimization\n\nconfigureMlr( show.learner.output = FALSE)\n\nfuncion_optimizar  <- EstimarGanancia\n\n#configuro la busqueda bayesiana,  los hiperparametros que se van a optimizar\n#por favor, no desesperarse por lo complejo\nobj.fun  <- makeSingleObjectiveFunction(\n              fn=       funcion_optimizar,\n              minimize= FALSE,   #estoy Maximizando la ganancia\n              noisy=    TRUE,\n              par.set=  hs,\n              has.simple.signature = FALSE\n             )\n\nctrl  <- makeMBOControl( save.on.disk.at.time= 600,  save.file.path= kbayesiana)\nctrl  <- setMBOControlTermination(ctrl, iters= kBO_iter )\nctrl  <- setMBOControlInfill(ctrl, crit= makeMBOInfillCritEI())\n\nsurr.km  <-  makeLearner(\"regr.km\", predict.type= \"se\", covtype= \"matern3_2\", control= list(trace= TRUE))","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#inicio la optimizacion bayesiana\nif(!file.exists(kbayesiana)) {\n  run  <- mbo(obj.fun, learner = surr.km, control = ctrl)\n} else  run  <- mboContinue( kbayesiana )   #retomo en caso que ya exista","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"quit( save=\"no\" )","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}